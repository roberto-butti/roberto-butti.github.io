<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0" xmlns:cc="http://cyber.law.harvard.edu/rss/creativeCommonsRssModule.html">
    <channel>
        <title><![CDATA[Stories by Roberto B on Medium]]></title>
        <description><![CDATA[Stories by Roberto B on Medium]]></description>
        <link>https://medium.com/@robertodev?source=rss-769d0c7c70c7------2</link>
        <image>
            <url>https://cdn-images-1.medium.com/fit/c/150/150/1*38TMTIKGh3xuKGs6mDS33Q.jpeg</url>
            <title>Stories by Roberto B on Medium</title>
            <link>https://medium.com/@robertodev?source=rss-769d0c7c70c7------2</link>
        </image>
        <generator>Medium</generator>
        <lastBuildDate>Thu, 17 Aug 2017 10:32:08 GMT</lastBuildDate>
        <atom:link href="https://medium.com/feed/@robertodev" rel="self" type="application/rss+xml"/>
        <webMaster><![CDATA[yourfriends@medium.com]]></webMaster>
        <atom:link href="http://medium.superfeedr.com" rel="hub"/>
        <item>
            <title><![CDATA[Nuxt.js and User Github Pages]]></title>
            <link>https://medium.com/@robertodev/nuxt-js-and-user-github-pages-fb4c82d7b84e?source=rss-769d0c7c70c7------2</link>
            <guid isPermaLink="false">https://medium.com/p/fb4c82d7b84e</guid>
            <category><![CDATA[makefile]]></category>
            <category><![CDATA[vuejs]]></category>
            <category><![CDATA[github-pages]]></category>
            <category><![CDATA[github]]></category>
            <category><![CDATA[nuxtjs]]></category>
            <dc:creator><![CDATA[Roberto B]]></dc:creator>
            <pubDate>Tue, 15 Aug 2017 16:37:50 GMT</pubDate>
            <atom:updated>2017-08-15T19:45:54.401Z</atom:updated>
            <content:encoded><![CDATA[<p>With <strong>GitHub Pages</strong> you can create a static website for your portfolio and yes, you can use <em>Nuxt.js</em>.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/566/1*AGxlSXRL9NeO-QoEl2YGWA.png" /><figcaption>Nuxt.js and User GitHub Pages</figcaption></figure><p>With GitHub Pages you have 2 kinds of pages:</p><ul><li>for user (or organization);</li><li>for projects.</li></ul><p>The first one is useful for your portfolio or your personal website.</p><p>The second one is useful for creating website for your projects (1 website for each project).</p><p>In this post I will focus on User GitHub Pages.</p><p>With User GitHub Pages you will have a URL like <em>username.github.io</em>, where username is your username (or organization name) on GitHub.</p><h3>Nuxt.js for static web site generation</h3><p>To deploy on GitHub Pages, you need to generate your static web application. If you setup correctly <em>Nuxt.js</em>, you can execute:</p><pre>npm run generate</pre><p>It will create a <em>dist</em> folder with everything inside ready to be deployed on GitHub Pages hosting.</p><h3>The deploy strategy</h3><p>My deploy strategy is to have:</p><ul><li>a directory with your sources (<em>src</em>). This directory can be pushed on your GitHub repository with your sources;</li><li>a directory with your built files (<em>deploy</em>). This directory can be pushed on your <em>username.github.io</em> repository.</li></ul><p>So, you have 2 github repositories, the first one for the sources and the second one for the built files.</p><h4>The directory layout</h4><figure><img alt="" src="https://cdn-images-1.medium.com/max/840/1*6lKUOc8IwAB2iLiyVTJeQA.png" /></figure><ol><li>“<em>deploy</em>” directory: directory related with “<em>username.github.io</em>” repository.</li><li>“<em>src</em>” directory: directory with <em>Nuxt.js</em> project. You can create this directory with the command: “<em>vue init nuxt/starter src</em>”</li><li>“<em>src/dist</em>”, this “<em>dist”</em> directory is stored under “<em>src</em>” dir. This directory is create by “<em>generate</em>” command.</li></ol><h4>Initialize your directories</h4><p>To create your “<em>deploy</em>” directory, you need to clone your “<em>username.github.io</em>” repository:</p><pre>git clone <a href="https://github.com/username/username.github.io">https://github.com/username/username.github.io</a> deploy</pre><p>To create your “<em>src</em>” directory, you need to create a new <em>Nuxt.js</em> project (with <em>vue-cli</em> command):</p><pre>vue init nuxt/starter src</pre><p>Both previous commands need to be executed in the same directory.</p><h3>Deploy your website on Github pages</h3><p>If you enter in “<em>src</em>” directory you can develop your site in classic <em>Nuxt.js</em> development. Once you are ready to deploy your website you must:</p><ul><li>generate your static files using nuxt command “<em>generate</em>”;</li><li>sync your dist directroy (generated by the previous command) with your “deploy” directory”;</li><li>push your “deploy” directory on the “username.github.io” repository</li></ul><p>Don’t worry, I wrote a <em>Makefile</em> to exetude this command. So place this <em>Makefile</em> under your <em>Nuxtjs</em> root diredctory (<em>src</em>).</p><p>The Make file is:</p><iframe src="" width="0" height="0" frameborder="0" scrolling="no"><a href="https://medium.com/media/06b514ba420120b008a2cf1f5bb53cfb/href">https://medium.com/media/06b514ba420120b008a2cf1f5bb53cfb/href</a></iframe><p>And you can execute this simply:</p><pre>make deploy</pre><p>And voilà, your Website is ready!!!</p><img src="https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=fb4c82d7b84e" width="1" height="1">]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[How to install Laravel 5.5 (dev)]]></title>
            <link>https://medium.com/@robertodev/how-to-install-laravel-5-5-dev-d721873a8c89?source=rss-769d0c7c70c7------2</link>
            <guid isPermaLink="false">https://medium.com/p/d721873a8c89</guid>
            <category><![CDATA[laravel]]></category>
            <category><![CDATA[php7]]></category>
            <category><![CDATA[php]]></category>
            <category><![CDATA[laravel-55]]></category>
            <dc:creator><![CDATA[Roberto B]]></dc:creator>
            <pubDate>Fri, 04 Aug 2017 11:05:02 GMT</pubDate>
            <atom:updated>2017-08-04T17:08:15.490Z</atom:updated>
            <content:encoded><![CDATA[<p>If you want to play with the upcoming new version of Laravel (5.5) you can easily install it.</p><p>On packagist, if you look at <em>“laravel/laravel”</em> packages, you can see that there is a version named “<a href="https://packagist.org/packages/laravel/laravel#dev-develop"><em>dev-develop</em></a><em>”</em></p><p>This version includes the upcoming new version of the “<em>laravel/framework”</em> packages.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*SmNIB19MqnmqT_7633f1Dw.png" /><figcaption>laravel/laravel package, “dev-develop” version</figcaption></figure><p>You can see that “<em>laravel/laravel”</em> includes “<em>laravel/framework</em> <em>5.5.*”</em> and requires <em>PHP</em> version 7.</p><p>To install <em>Laravel</em> 5.5 you need to launch <em>composer create-project</em> as usual and then you need to set the “<em>dev-develop</em>” version of the “<em>laravel/laravel”</em> package:</p><pre>composer create-project --prefer-dist laravel/laravel blog dev-develop</pre><p>Where:</p><ul><li><em>laravel/laravel</em>: is the package for the Laravel installation;</li><li><em>blog</em>: is the new directory for your new project (you can change it);</li><li><em>dev-develop</em>: is the next version of Laravel.</li></ul><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*WeFQI1fAessDEMwhab8AUw.png" /><figcaption>Launching composer command for creating project</figcaption></figure><p>Then you can enter in the new directory and execute the artisan command:</p><pre>$ cd blog<br>$ php artisan — version<br>Laravel Framework 5.5-dev</pre><figure><img alt="" src="https://cdn-images-1.medium.com/max/850/1*CsJ5liTukXqTPobhJQ4z9Q.png" /><figcaption>Laravel Framework 5.5-dev</figcaption></figure><p>Now you can start to play with the new features of Laravel 5.5. Here you can find a complete list of its new features:</p><p><a href="https://laravel-news.com/category/laravel-5.5">Laravel 5.5</a></p><img src="https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=d721873a8c89" width="1" height="1">]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Continuous Integration with Bitbucket Pipelines and Laravel5]]></title>
            <link>https://medium.com/@robertodev/continuous-integration-with-bitbucket-pipelines-and-laravel5-9c6a5133750?source=rss-769d0c7c70c7------2</link>
            <guid isPermaLink="false">https://medium.com/p/9c6a5133750</guid>
            <category><![CDATA[phpunit]]></category>
            <category><![CDATA[continuous-integration]]></category>
            <category><![CDATA[laravel]]></category>
            <category><![CDATA[automated-testing]]></category>
            <category><![CDATA[bitbucket]]></category>
            <dc:creator><![CDATA[Roberto B]]></dc:creator>
            <pubDate>Tue, 11 Jul 2017 12:28:22 GMT</pubDate>
            <atom:updated>2017-07-12T05:19:23.809Z</atom:updated>
            <content:encoded><![CDATA[<h4>How to configure Bitbucket Pipelines for continuous integration of a Laravel web application.</h4><p>Bitbucket Pipelines (<a href="https://bitbucket.org/product/features/pipelines">https://bitbucket.org/product/features/pipelines</a>) is a powerful tool provided by Atlassian for continuous integration and Laravel is a powerful framework for building Web Applications. We can use both together to test automatically our projects.</p><p>To use Bitbucket Pipelines you need an account on Bitbucket (<a href="https://bitbucket.org">https://bitbucket.org</a>) and you need to create a Git repository.</p><p>It allows you to execute some commands on your code. You can execute these commands in two way: automatic or manual.</p><p>The <strong>automatic</strong> way is useful when you need to launch automated tests or code quality check every time you push your code on Git or every time you push your code on a branch.</p><p>The <strong>manual</strong> way is useful when you want to deploy on production (or stage) a specific commit.</p><p>The configuration file that drives the entire <em>Pipelines</em> process is named <em>bitbucket-pipelines.yml</em>. You need to place this file in the root of your source code.</p><p>You can find a great documentation about <em>Pipelines</em> here: <a href="https://confluence.atlassian.com/bitbucket/build-test-and-deploy-with-pipelines-792496469.html">https://confluence.atlassian.com/bitbucket/build-test-and-deploy-with-pipelines-792496469.html</a></p><p>In this tutorial I would like to share with you my experiments with Laravel5, automated test and <em>Pipelines</em> configuration.</p><p><strong>My goal is</strong>: every time I push commits on my repository I need to execute automatically test for my <em>Laravel</em> web application.</p><p>The principle is simple: your commands will be executed on your source code committed on the repository, running in a Docker container.</p><p>First of all you need to select a Docker image for executing pipeline commands.</p><p>I chose <em>phpunit</em> docker image: <a href="https://hub.docker.com/r/phpunit/phpunit/">https://hub.docker.com/r/phpunit/phpunit/</a></p><p><a href="https://bitbucket.org/snippets/roberto_butti/R769dx">Bitbucket Pipelines for executing test with Laravel - Bitbucket</a></p><p>The content of my <em>bitbucket-pipelines.yml</em> for my Laravel Web Applications:</p><pre>image: phpunit/phpunit:6.0.6<br> <br>pipelines:<br>  default:<br>    - step:<br>        script:<br>          - apk add --no-cache php7-gd php7-xmlwriter<br>          - php -r &quot;file_exists(&#39;.env&#39;) || copy(&#39;.env.testing&#39;, &#39;.env&#39;);&quot;<br>          - composer install<br>          - php artisan key:generate<br>          - php artisan migrate<br>          - phpunit</pre><p>In the first line I set the image to use “phpunit/phpunit:6.0.6”. This docker image is built on top of Alpine Linux (<a href="https://alpinelinux.org/">https://alpinelinux.org/</a>), so if we need to install extra packages, we can use the package manager of Alpine (<em>apk add</em>).</p><p>In the <em>Yaml</em> file we need to define <em>pipelines -&gt; default -&gt; step -&gt; script</em> section. In this section we can add all needed commands that you want to execute after every push on your Git repository.</p><p>For <em>Laravel</em> (if you want to use extra modules like <em>Laravel Cashier</em> for <em>Stripe</em> or <em>Braintree</em> payment) you will need extra PHP modules not included in <em>phpunit</em> docker image: <em>GD</em> (to manage images) and <em>XmlWriter</em> (to manage XML files). To add this module you need to execute:</p><pre>apk add — no-cache php7-gd php7-xmlwriter</pre><p>Each line with command, it starts with the hypen.</p><p>Then, you need to set your testing configuration (database configuration, mail configuration etc) in the file<em> .env.testing</em> and then to copy it in to the <em>.env</em> file (the current configuration). Remember to commit <em>.env.testing</em> on your Bitbucket Git repository.</p><pre>php -r “file_exists(‘.env’) || copy(‘.env.testing’, ‘.env’);”</pre><p>Then, you need to install all vendors listed in <em>composer.json</em> file via composer command.</p><pre>composer install</pre><p>You need to install all your vendor, because every Pipelines execution is a fresh installation of your environment. So, for this reason you need also to generate a key for your Laravel installation (it is a typical command that you need to execute una tantum) and execute the migration:</p><pre>php artisan key:generate<br>php artisan migrate</pre><p>At the end you can execute your tests by launching <em>phpunit</em>:</p><pre>phpunit</pre><p>That’s all.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*Dys5SM9ca60j6Z5JOh7odw.png" /><figcaption>Continuous Integration with Bitbucket Pipelines and Laravel</figcaption></figure><p>Let me know your feedback!</p><img src="https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=9c6a5133750" width="1" height="1">]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Primi passi con Webpack e Vue.js 103]]></title>
            <link>https://medium.com/treviso-js/primi-passi-con-webpack-e-vue-js-103-b6737ce659f?source=rss-769d0c7c70c7------2</link>
            <guid isPermaLink="false">https://medium.com/p/b6737ce659f</guid>
            <category><![CDATA[javascript]]></category>
            <category><![CDATA[workflow]]></category>
            <category><![CDATA[webpack]]></category>
            <category><![CDATA[web-development]]></category>
            <category><![CDATA[vuejs]]></category>
            <dc:creator><![CDATA[Roberto B]]></dc:creator>
            <pubDate>Tue, 30 May 2017 05:41:33 GMT</pubDate>
            <atom:updated>2017-05-30T15:25:55.853Z</atom:updated>
            <content:encoded><![CDATA[<p>Componenti VUE, come organizzare il codice (template, script, style) e sfruttare gli automatismi Webpack.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*mwCUhtVD6iHZCvMO68tyyQ.png" /><figcaption>Come utilizzare componenti Vue in un flusso di lavoro Webpack</figcaption></figure><p>Dopo aver visto come installare <a href="https://medium.com/treviso-js/come-impostare-un-workflow-con-webpack-da-zero-599ba85b0bba">WebPack</a> e <a href="https://medium.com/treviso-js/primi-passi-con-webpack-e-vue-js-es6-babel-102-6c27d3741a80">Babel</a>, vediamo come aggiungere al proprio ambiente di sviluppo anche<em> Vue Loader</em>, un modulo che permette di organizzare il proprio codice a moduli <em>Vue</em>. Un modulo Vue, tipicamente contiene le sezioni:</p><ul><li>“<em>template</em>”: il codice HTML;</li><li>“<em>script</em>”: la logica Javascript;</li><li>“<em>style</em>”: la personalizzazione grafica (CSS).</li></ul><p>In ciascuna sezione è possibile utilizzare i “dialetti” preferiti, per esempio JADE per il template, e SCSS per lo style.</p><h3>Aggiungere i pacchetti necessari</h3><p>Per aggiungere i pacchetti legati a VUE necessari, utilizzare come al solito, utilizziamo il comando yarn:</p><pre>yarn add css-loader node-sass sass-loader --save <br>yarn add vue vue-loader vue-template-compiler --save</pre><p>Tale comando aggiornerà i vari file <em>package.json</em> e <em>yarn.lock</em> e procederà in autonomia con l’installazione dei pacchetti.</p><h3>Aggiornamento webpack.config.js</h3><p>Apportare le modifiche al file <em>webpack.config.js</em> in modo venga attivato Vue Loader.</p><iframe src="" width="0" height="0" frameborder="0" scrolling="no"><a href="https://medium.com/media/40a2033d3a8aa783f5bbad8d12d2c2d1/href">https://medium.com/media/40a2033d3a8aa783f5bbad8d12d2c2d1/href</a></iframe><p>In sostanza, le modifiche effettuate al <em>webpack.config.js</em> sono:</p><ul><li>caricamento vue-loader;</li><li>aggiunta di una regola (module/rules) in modo che venga abilitato Vue Loader con le opzioni per il riconoscimento di SCSS e SASS;</li><li>aggiunta di un alias per Vue.</li></ul><p>Fatto questo è possibile implementare il nostro primo modulo Vue.</p><p>Creare la directory <em>src/components/</em> in cui creare il file <em>Timer.vue</em>.</p><p>Il componente <em>Vue</em> di esempio <em>Timer.vue</em> è composto da tre sezioni: template, script e style. In un unico file abbiamo tutto quel che serve al nostro modulo “Timer”.</p><iframe src="" width="0" height="0" frameborder="0" scrolling="no"><a href="https://medium.com/media/6fb5e5da3e8b47ee02fab383e520bebc/href">https://medium.com/media/6fb5e5da3e8b47ee02fab383e520bebc/href</a></iframe><p>Nel file HTML ora è possibile dichiarare un tag chiamato <em>timer</em>.</p><iframe src="" width="0" height="0" frameborder="0" scrolling="no"><a href="https://medium.com/media/0fdbb1d3b93192df05aaf9928c3b2282/href">https://medium.com/media/0fdbb1d3b93192df05aaf9928c3b2282/href</a></iframe><p>Abbiamo implementato il componente e abbiamo definito la pagina in cui risiederà il componente, ora è sufficiente registrare il componente e attivarlo.</p><p>Nel file <em>app.js</em>, creiamo una istanza di <em>Vue</em> e carichiamo il componente (con il metodo <em>Vue.component</em> a cui passiamo il nome del tag custom HTML utilizzato e il nome del file con estensione <em>.vue</em>)e :</p><iframe src="" width="0" height="0" frameborder="0" scrolling="no"><a href="https://medium.com/media/bd4dd4dc527871124e78bdf535895338/href">https://medium.com/media/bd4dd4dc527871124e78bdf535895338/href</a></iframe><p>Avviare il server di sviluppo locale con il comando:</p><pre>webpack-dev-server --inline</pre><p>Aprire il browser e accedere all’URL <a href="http://localhost:8080/">http://localhost:8080/</a> (o all’URL visualizzato al momento del lancio di <em>webpack-dev-server</em>) per verificarne il funzionamento.</p><h3>Che cosa abbiamo fatto</h3><p>Riepiloghiamo cosa abbiamo fatto i questi 3 articoli. Abbiamo creato ambiente di sviluppo locale in cui è possibile strutturare l’applicazione Vue in componenti e soprattutto abbiamo attivato un workflow tale per cui ad ogni modifica apportata ai sorgenti, vengono attivati automaticamente una serie di task (traduzione ES6, traduzione SASS / SCSS). L’effetto ottenuto è che il browser riporta in tempo reale tutte le modifiche mentre stiamo i nostri componenti VUE.</p><p>Parte 1:</p><p><a href="https://medium.com/treviso-js/come-impostare-un-workflow-con-webpack-da-zero-599ba85b0bba">Primi passi con Webpack e Vue.js 101</a></p><p>Parte 2:</p><p><a href="https://medium.com/treviso-js/primi-passi-con-webpack-e-vue-js-es6-babel-102-6c27d3741a80">Primi passi con Webpack e Vue.js 102</a></p><p>Parte 3: in questo articolo abbiamo visto come attivare “Vue Loader” e agganciarlo al flusso di sviluppo in modo da poter organizzare il codice in componenti Vue sfruttando gli automatismi configurati nelle parti 1 e 2.</p><p><a href="https://github.com/roberto-butti/tomato">roberto-butti/tomato</a></p><img src="https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=b6737ce659f" width="1" height="1"><hr><p><a href="https://medium.com/treviso-js/primi-passi-con-webpack-e-vue-js-103-b6737ce659f">Primi passi con Webpack e Vue.js 103</a> was originally published in <a href="https://medium.com/treviso-js">Treviso JS</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Administration Panel with Laravel 5.4]]></title>
            <link>https://medium.com/@robertodev/administration-panel-with-laravel-5-4-11012bf10713?source=rss-769d0c7c70c7------2</link>
            <guid isPermaLink="false">https://medium.com/p/11012bf10713</guid>
            <category><![CDATA[admin]]></category>
            <category><![CDATA[php]]></category>
            <category><![CDATA[framework]]></category>
            <category><![CDATA[laravel]]></category>
            <dc:creator><![CDATA[Roberto B]]></dc:creator>
            <pubDate>Wed, 24 May 2017 13:12:28 GMT</pubDate>
            <atom:updated>2017-05-25T05:33:50.079Z</atom:updated>
            <content:encoded><![CDATA[<h3>How to build an administration panel with Laravel 5</h3><p>A common question about Laravel and, in general, about frameworks is: “How to built an administration panel?”. You can start from scratch by building dashboards, the listing, filters, sorting, pagination, form etc or by using a sort of tool that helps you to build this feature in the fastest way, starting from models (entities) and/or a configuration file.</p><p>In the past (Laravel4) I used FrozenNode for several projects (<a href="https://github.com/FrozenNode/Laravel-Administrator">https://github.com/FrozenNode/Laravel-Administrator</a>).</p><p>Today the original FrozenNode is not maintained anymore.</p><p>But don’t worry, a great guy (my friend) forked the original project and updated the project to support also Laravel5.4. Thank you Antonio!</p><p>The newest featured added for 5.4 version are:</p><ul><li>new layout;</li><li>Laravel 5.4 compatibility;</li><li>Title config String or Closure;</li><li>Favicon (png only) config String or Closure;</li><li>ENUM config Array or Closure;</li><li>New ckeditor layout;</li><li>Images config: Test resize (prevent stretch of image) and incremental naming (name*_n* if already exist);</li><li>Bugfix: wysiwyg loading on settings.</li></ul><p>You can find this fork on Github:</p><p><a href="https://github.com/exodusanto/Laravel-Admin">exodusanto/Laravel-Admin</a></p><h3>How to install Laravel-Admin</h3><p>From the directory of your project install the package via composer:</p><pre>composer require &quot;exodusanto/administrator: 5.4.*&quot;</pre><p>This command will update your <em>composer.json</em> file and install all the needed files under <em>/vendor/</em> directory.</p><p>You need to “publish” some files. With the verb “publish” I mean copying some files delivered in<em>/vendor/</em> directory to the right place. We have 2 kind of files: configuration file and public assets:</p><ul><li><em>config/administrator.php</em>: the file with the main configuration of Laravel-Admin;</li><li><em>public/packages/forzennode/administrator/*</em>: css, img and js files.</li></ul><p>To publish these files:</p><pre>php artisan vendor:publish</pre><p>In <em>config/app.php</em> file add the following line in <em>‘providers’</em> array:</p><pre>&#39;providers&#39; =&gt; [<br>    ...<br>    Frozennode\Administrator\AdministratorServiceProvider::class,<br>    ...<br>],</pre><h3>How to configure Laravel-Admin</h3><p>To configure the Laravel-Admin you have:</p><ul><li>a main configuration file named config/administrator.php (created by the above publishing command);</li><li>to create a directory config/administrator/settings where you will place the configuration files.</li></ul><h4>Main configuration file</h4><p>In the main configuration file (<em>config/administrator.php</em>) you can configure a lot of things like: the middleware used for the authentication, the URL or the domain of your admin panel, the configuration directories (where to place your configuration files), the menu structure (you can organize the menu items in a sort of hierarchical tree), the logic that controls the access to your administration panel, login and logout URLs etc. I suggest to have a look to administrator.php file, as it contains all option with default values and, most important thing, each option is well documented.</p><p>Suppose to have a “<em>users</em>” table where you store the user of your application and you want to manage it. To keep this tutorial easy, let’s say you want to manage only the “<em>name</em>” and “<em>email</em>” fields.</p><p>In order to do that, you need to change this configuration (in <em>config/administrator.php</em> file) by replacing the value of these attributes:</p><pre>&#39;middleware&#39; =&gt; array(&#39;web&#39;),<br>&#39;title&#39; =&gt; &#39;Title App&#39;,<br>&#39;menu&#39; =&gt; array(&#39;users&#39;),<br>&#39;home_page&#39; =&gt; &#39;users&#39;,<br>&#39;login_path&#39; =&gt; &#39;/login&#39;,<br>&#39;logout_path&#39; =&gt; &#39;/logout&#39;,</pre><p>Let me explain these options:</p><ul><li>middleware: which middleware the system will be use to authenticate the users that try to access to the administration panel;</li><li>title: the title of your project (the title in the header);</li><li>menu: the items of your menu, in this case we will have only one item;</li><li>home_page: the default page of the administration panel. With “users” you have setup a default view that shows the listing of the users;</li><li>login_path: the path of the login form (the Laravel-Admin will redirect here the users that can’t access the administration panel);</li><li>logout_path: in the header you will find a call to action to log out the user from the system.</li></ul><h4>How to manage a Model</h4><p>In an application you can have several models: User, Product, News etc…</p><p>Usually each Model corresponds to a table in the database. For this example I’m going to suppose that:</p><ul><li>there is a table in the database named “<em>users</em>” that has 2 fields: <em>name</em> and <em>email</em>;</li><li>there is an Eloquent Model named User that represents the “<em>users</em>” table.</li></ul><p>Create a file named <em>users.php</em> in the <em>config/administrator</em> directory (the name is very important because you need to use the same name in the menu and home_page attributes in the main configuration file). The file is:</p><iframe src="" width="0" height="0" frameborder="0" scrolling="no"><a href="https://medium.com/media/a8909c7f3b695cbc6f29f3a3389c0ddb/href">https://medium.com/media/a8909c7f3b695cbc6f29f3a3389c0ddb/href</a></iframe><p>Here, you can setup the model (<em>model</em>), the columns in the listing (<em>columns</em>), the filter in the listing page (<em>filters</em>), the fields in the edit and creation forms (<em>edit_fields</em>).</p><img src="https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=11012bf10713" width="1" height="1">]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[How to setup your LEMP server on Ubuntu 17.04]]></title>
            <link>https://medium.com/@robertodev/how-to-setup-your-lemp-server-on-ubuntu-17-04-6910b18a3679?source=rss-769d0c7c70c7------2</link>
            <guid isPermaLink="false">https://medium.com/p/6910b18a3679</guid>
            <category><![CDATA[php]]></category>
            <category><![CDATA[vultr]]></category>
            <category><![CDATA[ubuntu]]></category>
            <category><![CDATA[digitalocean]]></category>
            <category><![CDATA[nginx]]></category>
            <dc:creator><![CDATA[Roberto B]]></dc:creator>
            <pubDate>Thu, 04 May 2017 18:24:35 GMT</pubDate>
            <atom:updated>2017-06-12T12:16:23.903Z</atom:updated>
            <content:encoded><![CDATA[<h4>How to setup Nginx, MariaDB and PHP7 for Laravel5 on Ubuntu 17.04</h4><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*1VVrgH50xfG6U0GSpTUteg.png" /></figure><h4>Introduction</h4><p>The goal of this tutorial is to provide the steps needed for the right environment configuration to host a Laravel5 application. To achieve this, you need to install and configure:</p><ul><li>a web server: Nginx (a virtual host);</li><li>a database server: MariaDB;</li><li>a PHP7 interpreter.</li></ul><p>In this tutorial I suppose to configure your web server to answer to <em>http</em> request to a hostname: <a href="http://www.example.com."><em>http://www.example.com</em>.</a></p><h4>Choose your hosting provider</h4><p>My last project was built with Laravel 5.4, so I needed a stack with a Web Server, PHP7 and MySQL (MariaDB). Today we can choose from different Cloud Hosting Providers for example:</p><ul><li><a href="https://m.do.co/c/f62dfd227667">Digital Ocean</a></li><li><a href="http://www.vultr.com/?ref=7151246">Vultr</a></li></ul><p>The following steps are based on an <strong>Ubuntu 17.04</strong> installation so the instructions are the same whether you choose Vultr or Digital Ocean.</p><h4>Step One: login via root and user creation</h4><p>During the Droplet creation step on Digital Ocean Control panel, if you didn’t select “SSH Key” option, you should have received an email with the credentials and an IP address like this:</p><pre>Droplet Name: tutorial-ubuntu-lemp<br>IP Address: your_server_ip<br>Username: root<br>Password: your_password</pre><p>Access to your new Virtual Server (or droplet):</p><pre>ssh root@your_server_ip</pre><p>During the first login, accept the fingerprint, and the system will ask to change password. Type the password received by email and then type twice your new private password (for root user).<br>For the installation of the Web Server, Database Server and PHP you can use <em>root</em> privileges, but for deploying the <em>Laravel5</em> application you will need “normal” user privileges.<br>To add a user named <em>example</em> you need:</p><pre>adduser example</pre><p>and then you need to add the user to <em>sudo</em> group to allow it to execute commands with special privileges. To enable the new user <em>example</em> for using <em>sudo</em> command:</p><pre>usermod -aG sudo example</pre><h4>Step two: Update the operating system and activate the firewall</h4><p>First of all you need to keep your system updated:</p><pre>apt-get update<br>apt-get upgrade</pre><p>Then, install <em>Nginx</em>:</p><pre>apt-get install nginx</pre><p>Now you need to close some ports and to activate the firewall.<br>Open only HTTP and SSH ports:</p><pre>ufw allow &#39;Nginx HTTP&#39;<br>ufw allow &#39;OpenSSH&#39;</pre><p>Activate the firewall:</p><pre>ufw enable</pre><p>And finally check the status:</p><pre>ufw status</pre><p>The output should be something like this:</p><pre>Status: active<br>To Action From<br> — — — — — — <br>Nginx HTTP ALLOW Anywhere<br>OpenSSH ALLOW Anywhere<br>Nginx HTTP (v6) ALLOW Anywhere (v6)<br>OpenSSH (v6) ALLOW Anywhere (v6)</pre><h4>Step Three: setup a Virtual Host in Nginx</h4><p>Create the directory where to place your PHP files:</p><pre>mkdir -p /var/www/example.com/htdocs/public</pre><p>Install the PHP interpreter:</p><pre>apt-get install php-fpm php-mysql</pre><p>Create a PHP test file under the new directory:</p><pre>vim /var/www/example.com/htdocs/public/test.php</pre><p>the content of the new file is:</p><pre>&lt;?php<br>phpinfo();</pre><p>Give the right ownership to the directory (<em>example</em> is the user owner, <em>www-data</em> is the group owner) and permission (<em>750</em>) in recursive way:</p><pre>chown -R example:www-data /var/www/example.com/<br>chmod -R 750 /var/www/example.com/</pre><p>Now you need to create the <em>Nginx</em> configuration file for the virtual host:</p><pre>cp /etc/nginx/sites-available/default /etc/nginx/sites-available/example.com</pre><p>The content of the <em>Nginx</em> configuration file is:</p><iframe src="" width="0" height="0" frameborder="0" scrolling="no"><a href="https://medium.com/media/314c20c15f5092c2607e41ddc77cfbbf/href">https://medium.com/media/314c20c15f5092c2607e41ddc77cfbbf/href</a></iframe><p>Enable the configuration and create a symbolic link for the new configuration file from <em>sites-enabled</em> directory to <em>sites-available</em>:</p><pre>ln -s /etc/nginx/sites-available/example.com /etc/nginx/sites-enabled/</pre><p>Add the row:</p><pre>server_names_hash_bucket_size 64;</pre><p>to the <em>/etc/nginx/nginx.conf</em> file in the <em>http</em> section.</p><p>If you want to deny the request via http with numeric IP address, remove the symbolic link for the deactivation of the the main/default virtual host:</p><pre>rm /etc/nginx/sites-enabled/default</pre><p>Test your <em>Nginx</em> configuration:</p><pre>nginx -t</pre><p>Restart the <em>Nginx</em> server:</p><pre>service nginx restart</pre><h4>Step Four: install the Database (MariaDB)</h4><p>Install the database server:</p><pre>apt-get install mariadb-server</pre><p>execute the script to complete the configuration:</p><pre>/usr/bin/mysql_secure_installation</pre><p>during the execution of this script, it will ask you to type the <em>root</em> database password.</p><p>When the execution is completed, try to access to your database server:</p><pre>mysql -u root -p</pre><p>and input the new password to access to the database administration console.</p><p>In the database administration console:</p><ul><li>create the database <em>db_example</em>;</li><li>create the user to access the database (<em>dbuserexample</em>) with the password <em>db_password</em></li><li>grant the right privileges to the new user;</li></ul><pre>create database db_example;<br>CREATE USER &#39;dbuserexample&#39;@&#39;localhost&#39; IDENTIFIED BY &#39;db_password&#39;;<br>GRANT ALL PRIVILEGES ON * . * TO &#39;dbuserexample&#39;@&#39;localhost&#39;;<br>FLUSH PRIVILEGES;</pre><h4>Step Five: test your installation and configuration</h4><p>Open your Web Browser and go to your URL (http://www.example.com/test.php)</p><p>If everything is OK, you should see the PHP info page ;-)</p><p>In the next tutorial we will deploy a <em>Laravel</em> application in this new environment via <em>Makefile.</em></p><img src="https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=6910b18a3679" width="1" height="1">]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Primi passi con Webpack e Vue.js 102]]></title>
            <link>https://medium.com/treviso-js/primi-passi-con-webpack-e-vue-js-es6-babel-102-6c27d3741a80?source=rss-769d0c7c70c7------2</link>
            <guid isPermaLink="false">https://medium.com/p/6c27d3741a80</guid>
            <category><![CDATA[babeljs]]></category>
            <category><![CDATA[javascript]]></category>
            <category><![CDATA[webpack]]></category>
            <category><![CDATA[tutorial]]></category>
            <category><![CDATA[es6]]></category>
            <dc:creator><![CDATA[Roberto B]]></dc:creator>
            <pubDate>Sat, 08 Apr 2017 08:19:50 GMT</pubDate>
            <atom:updated>2017-04-10T08:14:46.352Z</atom:updated>
            <content:encoded><![CDATA[<p>Come utilizzare ES6 e abilitare Babel nel flusso di build con Webpack.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*JAJn9kdF_JwYwQ_lAZUKmw.png" /><figcaption>Utilizzare ES6 tramite Webpack e Babeljs</figcaption></figure><p><strong><em>ES6</em></strong> è l’evoluzione del linguaggio <em>Javascript </em>che ha l’obiettivo di migliorarne la leggibilità, la semplicità e aumentarne la potenza espressiva.<br>Molti browser supportano ES6 in maniera parziale. Per questo esistono strumenti come Babel che permettono di tradurre codice scritto secondo la sintassi ES6 in Javascript “classico”.<br>Questo significa che ad ogni modifica a file ES6 occorre “ricompilare” il file per poter ottenere il file in formato Javascript “classico”.</p><h3>Babel</h3><p>Lo strumento che ci permette di tradurre la sintassi <em>ES6</em> in sintassi <em>Javascript</em> è <em>Babel</em>.</p><p>Tramite il package manager <em>Yarn</em>, aggiungere quel che serve per poter utilizzare <em>Babel</em>:</p><pre>yarn add babel-core babel-loader babel-plugin-transform-runtime babel-preset-es2015 --save</pre><p>Il comando, installa i vari moduli che servono e aggiunge le righe necessarie ai files <em>package.json</em> e <em>yarn.lock</em>.</p><h3>Attivare la compilazione ES6</h3><p>Nel file <em>webpack.config.js</em> aggiungere le regole per la compilazione <em>ES6</em>:</p><pre>module: {<br>    rules: [{<br>        test: /\.js$/,<br>        include: path.resolve(__dirname, &#39;src&#39;),<br>        use: [{<br>            loader: &#39;babel-loader&#39;,<br>            options: {<br>                plugins: [&#39;transform-runtime&#39;]<br>            }</pre><pre>        }]<br>    }]<br>},</pre><h3>Aggiungere il file .babelrc</h3><p>Creare il file <em>.babelrc</em> .</p><p>Attenzione, tale file è fondamentale, senza di esso il processo di build non fornisce nessun errore ma non viene attivato il processo di “compilazione”.<br>Il file <em>.babelrc</em> di esempio:</p><pre>{<br>  &quot;presets&quot;: [<br>    [&quot;es2015&quot;]<br>  ],<br>  &quot;plugins&quot;: [&quot;babel-plugin-transform-runtime&quot;],<br>  &quot;comments&quot;: false<br>}</pre><h3>Testare il corretto funzionamento</h3><p>Per testare la corretta attivazione di Babel nel processo di “build”, provare a utilizzare una funzionalità specifica presente in ES6 e non in Javascript “classico”. Per esempio, nel file <em>app.js</em> (nella directory <em>src/</em>), stampare la stringa “Hello World!” tramite una “arrow function” (funzionalità presente in ES6):</p><pre>const f = m =&gt;{<br> console.log(m)<br>}</pre><pre>f(&quot;Hello World!&quot;);</pre><p>Nel web inspector del vostro browser ora dovreste trovare nella Console il vostro “Hello world!”.<br>Questo potrebbe essere un test non completamente affidabile, infatti se il browser utilizzato supporta le arrow function, vedreste comunque la stringa “Hello World!”.<br>Per effettuare una verifica completa, ispezionare il contenuto del file <em>dist/app.bundle.js</em> e verificare che la funzione f() definita in ES6 è stata tradotta con un codice JS “classico”:</p><pre>var f = function f(m) {<br> console.log(m);<br>};</pre><pre>f(&quot;Hello World!&quot;);</pre><h3>Pronti per Vue.js</h3><p>In questo modo abbiamo abilitato Babel nel nostro processo di sviluppo (e di conseguenza la possibilità di utilizzare sintassi e funzionalità ES6).</p><p>Partendo dal <a href="https://medium.com/treviso-js/come-impostare-un-workflow-con-webpack-da-zero-599ba85b0bba">precedente articolo (setup Webpack)</a> e da questo articolo (setup Babel) siamo pronti per il prossimo step, dove aggiungeremo tutto quel che serve per avere Vue.js in questo flusso di lavoro.</p><p>I codici sorgenti per questo articolo li potete trovare su Github nel progetto “tomato”, tag “Webpack_babel”:</p><p><a href="https://github.com/roberto-butti/tomato/tree/Webpack_Babel">roberto-butti/tomato</a></p><h3><strong>Parte 1:</strong></h3><p><a href="https://medium.com/treviso-js/come-impostare-un-workflow-con-webpack-da-zero-599ba85b0bba">Primi passi con Webpack e Vue.js 101</a></p><img src="https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=6c27d3741a80" width="1" height="1"><hr><p><a href="https://medium.com/treviso-js/primi-passi-con-webpack-e-vue-js-es6-babel-102-6c27d3741a80">Primi passi con Webpack e Vue.js 102</a> was originally published in <a href="https://medium.com/treviso-js">Treviso JS</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Primi passi con Webpack e Vue.js 101]]></title>
            <link>https://medium.com/treviso-js/come-impostare-un-workflow-con-webpack-da-zero-599ba85b0bba?source=rss-769d0c7c70c7------2</link>
            <guid isPermaLink="false">https://medium.com/p/599ba85b0bba</guid>
            <category><![CDATA[webpack]]></category>
            <category><![CDATA[javascript]]></category>
            <category><![CDATA[yarn]]></category>
            <category><![CDATA[frontend]]></category>
            <category><![CDATA[tutorial]]></category>
            <dc:creator><![CDATA[Roberto B]]></dc:creator>
            <pubDate>Fri, 31 Mar 2017 21:47:37 GMT</pubDate>
            <atom:updated>2017-05-19T14:50:40.403Z</atom:updated>
            <content:encoded><![CDATA[<p>Come impostare un workflow con Webpack da zero</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*8SbuUKm5E_miKViUrogGqA.png" /><figcaption>Primi passi con Webpack e Vue.js</figcaption></figure><p>Vorrei documentare e condividere la mia esperienza di avvicinamento a Webpack, yarn e Vue. In questo primo articolo vorrei illustrare i passi necessari per poter installare e configurare Webpack al fine di creare una web app molto elementare. Con gli articoli successivi, vorrei approfondire Vue.</p><p><strong>Obiettivo</strong>: creare una pagina html che includa un file Javascript il cui compito è quello di stampare la stringa “Hello World” nella Console, tramite il comando console.log(). Questo obiettivo molto semplice, ci serve per focalizzare l’attenzione sugli step necessari per poter impostare un workflow elementare di sviluppo tramite Webpack.</p><h3>Yarn</h3><p>Per la gestione dei pacchetti ci affideremo a <a href="https://yarnpkg.com/en/docs/getting-started">Yarn</a>.</p><p>Per installare Yarn su macosx, consiglio di utilizzare brew:</p><pre>brew install yarn</pre><p>Per inizializzare il progetto, creare la directory di progetto, entrare nella directory ed eseguire il comando di inizializzazione:</p><pre>mkdir progetto<br>cd progetto<br>yarn init</pre><p>Con quest’ultimo comando vengono richieste alcune informazioni come nome progetto, nome autore eccetera, informazioni che vengono collezionate ed utilizzate per generare il file <em>package.json</em> (sì, proprio quello di <em>npm</em>)</p><h3>Installazione di Webpack</h3><p>Per installare webpack, ricorrere all’utilizzo di yarn:</p><pre>yarn add webpack webpack-dev-server --save</pre><p>Dove <em>add</em> è la direttiva per poter aggiungere pacchetti, l’opzione <em>save</em> indica di apportare le modifiche al file <em>package.json</em>. Se controllate il vostro file <em>package.json</em> troverete alcune righe nuove:</p><pre>&quot;dependencies&quot;: {<br>    &quot;webpack&quot;: &quot;^2.5.1&quot;,<br>    &quot;webpack-dev-server&quot;: &quot;^2.4.5&quot;<br> }</pre><p>Viene creato anche il file <em>yarn.lock</em> contenente l’elenco dei pacchetti effettivamente installati con le informazioni relative alle versioni.</p><p>Oltre alla modifica del file <em>package.json</em>, alla creazione del file <em>yarn.lock</em>, ovviamente vengono installati anche i pacchetti nella directory <em>node_modules</em>.</p><p>Tale directory deve essere inclusa nel file <em>.gitignore</em>.</p><p>Assicurarsi che il comando <em>webpack</em> sia presente nel <em>PATH</em>.<br>Con la precedente installazione, nella directory node_modules è stata creata una nuova directory chiamata <em>.bin/.</em></p><p>In tale directory sono presenti gli eseguibili dei vari moduli installati, tra cui anche <em>webpack</em>.<br>Per fare in modo che tale directory sia censita tra il <em>PATH</em> eseguire:</p><pre>export PATH=node_modules/.bin:$PATH</pre><p>Per rendere persistente questa configurazione aggiungere tale comando nel file <em>.bashrc</em> o nel file <em>.zshrc</em> (a seconda della vostra shell).</p><h3>Il file webpack.config.js</h3><p>Creare il file di configurazione di <em>webpack</em>. Tale file (<em>webpack.config.js</em>) è un file javascript più o meno complesso a seconda dei task che vogliamo automatizzare con <em>webpack</em>.<br>Un file minimale di <em>webpack</em>:</p><iframe src="" width="0" height="0" frameborder="0" scrolling="no"><a href="https://medium.com/media/188dfbc9ef9565df984fb24662bd68dc/href">https://medium.com/media/188dfbc9ef9565df984fb24662bd68dc/href</a></iframe><h3>Esecuzione di Webpack</h3><p>Creare la directory <em>src</em> in cui verranno memorizzati i files js e creare il file <em>src/app.js</em>:</p><pre>console.log(&quot;Hello World!&quot;);</pre><p>Ora è possibile eseguire il comando webpack:</p><pre>webpack</pre><p>Questo comando, interpretando le regole presenti nel file <em>webpack.config.js</em>, recupera i file nella directory <em>src/</em> esegue la fase di “build” e li predispone nella directory <em>dist</em> (nuova directory creata da webpack per i file da distribuire sul server in fase di deploy). Ricordarsi ovviamente di mettere la directory <em>dist</em> (creata automaticamente nel file <em>.gitignore</em>).</p><h3>Creazione file HTML</h3><p>Creare nella radice del progetto il file index.html:</p><pre>&lt;!DOCTYPE html&gt;<br>&lt;html&gt;<br> &lt;head&gt;<br> &lt;title&gt;Tomato&lt;/title&gt;<br> &lt;/head&gt;<br> &lt;body&gt;<br> &lt;div id=&quot;app&quot;&gt;&lt;/div&gt;<br> &lt;script type=&quot;text/javascript&quot; src=&quot;dist/app.bundle.js&quot;&gt;&lt;/script&gt;<br> &lt;/body&gt;<br>&lt;/html&gt;</pre><h3>Esecuzione Web Server di sviluppo</h3><p>Ora che si ha a disposizione il file HTML con il layout e il file Javascript con la logica, è possibile avviare il web server di sviluppo di webpack.</p><p>Tale modalità è molto interessante in quanto ad ogni modifica dei files (per esempio al file Javascript), in automatico viene eseguita la fase di build e viene effettuato un reload nel browser web.</p><p>Lanciare il comando:</p><pre>webpack-dev-server --inline</pre><p>e accedere tramite browser all’URL indicato nell’output del comando (solitamente <a href="http://localhost:8080/"><strong>http://localhost:8080/</strong></a>) attivare il browser inspector e visualizzare il tab <em>console</em>.</p><h3>Sorgenti di esempio (github)</h3><p><a href="https://github.com/roberto-butti/tomato/tree/Webpack_starter_example">roberto-butti/tomato</a></p><h3>Prossimi passi</h3><p>Nel prossimo articolo, vedremo come abilitare Babel (per la sintassi ES6) e come organizzare il flusso di build dei file CSS e JS.</p><h3><strong>Parte 2:</strong></h3><p><a href="https://medium.com/treviso-js/primi-passi-con-webpack-e-vue-js-es6-babel-102-6c27d3741a80">Primi passi con Webpack e Vue.js 102</a></p><img src="https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=599ba85b0bba" width="1" height="1"><hr><p><a href="https://medium.com/treviso-js/come-impostare-un-workflow-con-webpack-da-zero-599ba85b0bba">Primi passi con Webpack e Vue.js 101</a> was originally published in <a href="https://medium.com/treviso-js">Treviso JS</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[How to install Symfony3 with MongoDB]]></title>
            <link>https://medium.com/@robertodev/how-to-install-symfony3-with-mongodb-5ce5baaee4e7?source=rss-769d0c7c70c7------2</link>
            <guid isPermaLink="false">https://medium.com/p/5ce5baaee4e7</guid>
            <category><![CDATA[php7]]></category>
            <category><![CDATA[php]]></category>
            <category><![CDATA[mongodb]]></category>
            <category><![CDATA[doctrine]]></category>
            <category><![CDATA[symfony]]></category>
            <dc:creator><![CDATA[Roberto B]]></dc:creator>
            <pubDate>Thu, 06 Oct 2016 14:33:40 GMT</pubDate>
            <atom:updated>2017-08-08T13:13:58.818Z</atom:updated>
            <content:encoded><![CDATA[<p>Would you like to install and use Symfony3 with MongoDB and PHP7?</p><p>A good starting point for installing Symfony3 and Mongo DB is the <a href="http://symfony.com/doc/current/bundles/DoctrineMongoDBBundle/index.html">official tutorial on Symfony web site</a>. I think that it is a good tutorial because it is very clear.</p><p>In order to use Symfony with MongoDB you need:</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/648/1*WkidDpDqDVXjzKix2BZNyA.png" /><figcaption>Doctrine/MongoDB Stack needed by Symfony3 and php7</figcaption></figure><ul><li>Symfony 3 : obviously :-) ;</li><li>Symfony Doctrine MongoDB Bundle (<a href="https://packagist.org/packages/doctrine/mongodb-odm-bundle">doctrine/mongodb-odm-bundle</a>): this bundle <strong>integrates the Doctrine2 MongoDB</strong> Object Document Mapper (ODM) library into Symfony;</li><li>Doctrine MongoDB Object Document Mapper (doctrine/mongodb-odm): library that provides a <strong>PHP object mapping</strong> functionality for MongoDB;</li><li>MongoDB Adapter (<a href="https://packagist.org/packages/alcaeus/mongo-php-adapter">alcaeus/mongo-php-adapter</a>): It provides the API of ext-mongo built on top of mongo-php-library, thus being compatible with PHP 7;</li><li>MongoDB driver library (<a href="https://packagist.org/packages/mongodb/mongodb">mongodb/mongodb</a>): provides a <strong>high-level abstraction</strong> around the lower-level drivers for PHP;</li><li><a href="http://php.net/manual/en/set.mongodb.php">MongoDB PHP extension</a>: low level driver extension for PHP and HHVM. Please pay attention on the MongoDB driver. <strong>Don’t use the legacy MongoDB driver</strong> (<a href="http://php.net/manual/en/book.mongo.php">http://php.net/manual/en/book.mongo.php</a>).</li></ul><h3>Install MongoDB PHP extension</h3><p>First of all you need to enable the MongoDB extension in your PHP installation.</p><p>A good starting point is <a href="http://php.net/manual/en/mongodb.installation.php">http://php.net/manual/en/mongodb.installation.php</a></p><p>On my machine (OS X El Capitain 10.11) I installed the mongoDB extension via Homebrew with the command:</p><pre>$ brew install homebrew/php/php70-mongodb</pre><p>This command will create the file:</p><pre>/usr/local/etc/php/7.0/conf.d/ext-mongodb.ini</pre><p>The content of the file is</p><pre>[mongodb]<br>extension=”/usr/local/opt/php70-mongodb/mongodb.so”</pre><p>Check if the extension is enabled with the command:</p><pre>$ php -i | grep mongo</pre><p>the output is</p><pre>/usr/local/etc/php/7.0/conf.d/ext-mongodb.ini,<br>mongodb<br>mongodb support =&gt; enabled<br>mongodb version =&gt; 1.1.8<br>mongodb stability =&gt; stable<br>libmongoc version =&gt; 1.3.5<br>mongodb.debug =&gt; no value =&gt; no value</pre><p>Ok, now you have your mongoDB extension enabled.</p><h3>Create Symfony3 project</h3><p>Create the new project with “symfony” command (<em>sfmongodbmedium</em> is the name of the project):</p><pre>$ symfony new sfmongodbmedium<br>$ cd sfmongodbmedium</pre><p>Make sure that you have <a href="https://getcomposer.org/download/">Composer</a> installed</p><blockquote>To install composer you can read page: <a href="https://getcomposer.org/download/">https://getcomposer.org/download/</a></blockquote><h3>Install the MongoDB adapter</h3><p>You need to install the MongoDB adapter (for PHP7):</p><pre>composer require alcaeus/mongo-php-adapter</pre><p>This command will configure your <em>composer.json</em> file and add 2 packages: <em>alcaeus/mongo-php-adapter</em> and its dependency <em>mongodb/mongodb</em>.</p><p>With this command you have your high level libraries for accessing MongoDB API.</p><h3>Install MongoDB Doctrine packages</h3><p>To install MongoDB Doctrine Packages:</p><pre>composer require doctrine/mongodb-odm doctrine/mongodb-odm-bundle</pre><p>This command will install the Object Document Mapper for MongoDB , its Symfony Bundle and its dependency <em>doctrine/mongodb</em>.</p><p>Now, you have your Symfony/Doctrine/MongoDB stack installed on your project. You can go on with the configuration.</p><h3>Configuration and setup</h3><p>Now you need to configure your Symfony3 installation to use your Symfony/Doctrine/MongoDB stack.</p><p>You can follow the instruction here: <a href="http://symfony.com/doc/current/bundles/DoctrineMongoDBBundle/index.html">http://symfony.com/doc/current/bundles/DoctrineMongoDBBundle/index.html</a></p><p>You need to add the lines:</p><pre>use Doctrine\ODM\MongoDB\Mapping\Driver\AnnotationDriver;<br>AnnotationDriver::registerAnnotationClasses();</pre><p>in your <em>app/autoload.php</em> file.</p><p>You need to add the lines:</p><pre>new Doctrine\Bundle\MongoDBBundle\DoctrineMongoDBBundle(),</pre><p>in your bundles array list in your <em>app/AppKernel.php</em> file.</p><p>You need to add lines:</p><pre>mongodb_server: “mongodb://localhost:27017”</pre><p>in your app/config/parameters.yml.</p><p>Now you are ready to code your Symfony3 + MongoDB combo!</p><img src="https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=5ce5baaee4e7" width="1" height="1">]]></content:encoded>
        </item>
    </channel>
</rss>